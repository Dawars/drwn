namespace drwn {
/*@{*/

/*!
   \page drwnProjMatlab Matlab Interfaces

   The \b matlab project implements \p mex interfaces to various
   components of the \b Darwin library. A number of Matlab scripts (in
   \p src/scripts) also facilitate interoperating with \b Darwin from
   Matlab. The Matlab routines are:

   \li \p mexAnalyseClassifier : analyse the performance of a classifier
   \li \p mexDarwinTest : test \b Darwin libraries from Matlab
   \li \p mexEvalClassifier : run a previously trained classifier on some new data
   \li \p mexFactorGraphInference : perform graphical model inference
   \li \p mexImageCRF : perform CRF-based pixel labeling on an image
   \li \p mexKMeans : run (weighted) k-means on a given dataset
   \li \p mexLearnClassifier : learn a classifier from training data
   \li \p mexLoadSuperpixels : loads superpixels from a previously saved drwnSuperpixelContainer object
   \li \p mexMaxFlow : find the maximum flow through a weighted directed graph
   \li \p mexQPSolver : solve a quadratic program using \b Darwin's QP solver
   \li \p mexSaveSuperpixels : saves superpixels to a drwnSuperpixelContainer object

   \li \p drwnCombineImages : combines multiple images into a single big image
   \li \p drwnLoadDataset : loads a drwnDataset object
   \li \p drwnSaveDataset : saves a drwnDataset object

   The remainder of this document describes how to compile the \p mex
   interfaces and provides some example uses. Pre-compiled \p mex
   files can be downloaded from \ref drwnCodeDownload. Additional
   examples can be found in the \p projects/matlab/examples directory.

   \section drwnProjMatlabInstall Compiling

   \subsection drwnProjMatlabInstallLinux Linux

   \li build the \b Darwin libraries (\ref linuxCodeBuild)
   \li change to the \p external directory
   \li create a symbolic link to matlab, e.g.,
   \code
     ln -s /usr/local/MATLAB/R2010b/ matlab
   \endcode
   \li change to the root \b Darwin directory and type \p "make drwnprojs"
   \li alternatively, start Matlab, change to the \p projects/matlab directory and execute \p buildLinux

   \warning On the latest versions of Ubuntu and older versions of
   Matlab you may get compiler warnings complaining about gcc version
   incompatibility. This can be fixed by replacing libstdc++.so.6 and
   libgcc_s.so.1 in the Matlab library directory, e.g.,
   \code
     cd external/matlab/sys/os/glnx86
     rm libstdc++*
     rm libgcc*
     ln -s /usr/lib/i386-linux-gnu/libstdc++.so.6
     ln -s /usr/lib/i386-linux-gnu/libgcc_s.so.1
   \endcode
   You may need to execute these commands with superuser privileges.

   \subsection drwnProjMatlabInstallWindows Windows

   \li compile the \b Darwin libraries in Release Mode
   \li start Matlab
   \li configure the mex compiler (\p "mex -setup")
   \li change to the \p projects\\matlab directory
   \li execute \p buildWindows

   \warning Make sure you have compiled the \b Darwin libraries for
   the correct architecture. For example, if you are running 64-bit
   Matlab then you will need to compile the \b Darwin libraries using
   the x64 configuration.

   \subsection drwnProjMatlabInstallMacOSX Mac OS X

   \li build the \b Darwin libraries (\ref osxCodeBuild)
   \li create a symbolic link to matlab in the \p external directory, e.g.,
   \code
     ln -s /Applications/MATLAB_R2014a.app/ external/matlab
   \endcode
   \li type \p "make drwnprojs"
   \li alternatively, start Matlab, change to the \p projects/matlab directory and execute \p buildMacOSX

   \section drwnProjMatlabExamples Examples

   \subsection drwnProjMatlabExampleClassifier Multi-class Classification

   The full suite of \b Darwin classifiers can be trained and
   evaluated from Matlab. The following example shows how to train a
   multi-class logistic classifier (\ref drwnMultiClassLogistic) and
   then evaluate it (on the training set!).

   \code
   % load iris dataset
   [x, y] = iris_dataset;
   x = x'; y = ([0, 1, 2] * y)';

   % learn a classifier
   options = struct('verbose', 1, 'method', 'drwnMultiClassLogistic');
   classifier = mexLearnClassifier(x, y, [], options);

   % evaluate classifier (on training data)
   options = struct('verbose', 1);
   [predictions, scores] = mexEvalClassifier(classifier, x, options);

   accuracy = sum(predictions == y)
   \endcode

   The classifier is stored as an XML string and can be saved for
   later use. Sometimes it is useful to weight the training examples
   differently, e.g., so that every class contributes the same mass to
   the classifier. The following code snippet shows an example:

   \code
   % weight training examples
   numClasses = max(y) + 1;
   w = zeros(size(y));
   for k = 1:numClasses,
       indx = find(y == k - 1);
       w(indx) = 1.0 / length(indx);
   end;

   % learn a classifier
   options = struct('verbose', 1, 'method', 'drwnMultiClassLogistic');
   classifier = mexLearnClassifier(x, y, w, options);
   \endcode

   \warning In \b Darwin classes are labeled from 0 to K-1. A negative
   class means \i unknown and is ignored during training.

   Sometimes it helps to normalize features to have zero mean and unit
   variance before training classifiers. You can do this automatically
   using the \p 'whiten' option. The normalization parameters are
   stored with the classifier and will be applied automatically when
   invoking the the \p mexEvaluateClassifier function.

   If instead of learning a multi-class logistic classifier (\ref
   drwnMultiClassLogistic) you want to learn a decision tree
   classifier (\ref drwnDecisionTree) you can simply change the \p
   'method' option. The \p 'set' option allows you to configure the
   internal parameters of the decision tree as the following code
   snippet shows:

   \code
   % learn a decision tree classifier
   options = struct('verbose', 1, 'method', 'drwnDecisionTree', ...
       'set', 'drwnDecisionTree maxDepth 5');
   classifier = mexLearnClassifier(x, y, [], options);
   \endcode

   \subsection drwnProjMatlabExampleInference Graphical Model MAP Inference

   In order to perform inference in a graphical model we need to
   define the universe of variables and a factor graph over which
   inference will be performed. The universe is defined by a vector
   specifying the cardinality of each variable. For example,

   \code
   universe = [3, 2, 2];
   \endcode

   Defines a universe over three random variables, say, A, B, and
   C. The first random variable, A, is ternary, while the remaining
   two are binary.

   Next we need to define a factor graph, which is a structure array
   that specifies the set of variables in each factor and the value of
   the factor for every possible assignment to it's variables. The
   following provides an example factor graph with two (random)
   factors defined over variables (A, B) and (B, C), respectively.

   \code
   factors = [];
   factors(1).vars = [0 1];
   factors(1).data = rand(prod(universe([1 2])), 1);
   factors(2).vars = [1 2];
   factors(2).data = rand(prod(universe([2 3])), 1);
   \endcode

   \warning In \b Darwin indexes are 0-based, while in Matlab they
   are 1-based.

   We can now run inference over the factor graph. For example, to run
   max-product inference and display the resulting MAP assignment we
   have

   \code
   options = struct('verbose', 1, 'method', 'drwnMaxProdInference');
   assignment = mexFactorGraphInference(universe, factors, [], options);
   disp(assignment);
   \endcode

   \subsection drwnProjMatlabExampleMaxFlow Max-Flow/Min-Cut

   The \p mexMaxFlow function provides code for computing the
   minimum-cut in a directed weighted graph (see \ref drwnMaxFlowDoc).

   The following example shows how to find the value of the minimum
   cut on a simple graph from Matlab.

\dot
digraph dependencies {
  rankdir=LR;
  node [shape=circle, fontname=Helvetica, fontsize=10, height=0.3];
  edge [fontname=Helvetica, fontsize=10];
  S -> 0 [label="3"];
  S -> 2 [label="3"];
  0 -> 1 [label="4"];
  1 -> 2 [label="1"];
  1 -> 3 [label="2"];
  2 -> 3 [label="2"];
  2 -> 4 [label="6"];
  3 -> T [label="1"];
  4 -> T [label="9"];
}
\enddot

\code
% define edges
edgeList = [
    -1  0  3;  % SOURCE -> 0
    -1  2  3;  % SOURCE -> 2
     0  1  4;  % 0 -> 1
     1  2  1;  % 1 -> 2
     1  3  2;  % 1 -> 3
     2  3  2;  % 2 -> 3
     2  4  6;  % 2 -> 4
     3 -1  1;  % 3 -> TARGET
     4 -1  9;  % 4 -> TARGET
];

% run max-flow
[value] = mexMaxFlow(edgeList);

disp(['Value of minimum cut is ', num2str(value)]);
\endcode

  \note A negative value indicates a source or target edge. Node
  indexing is 0-based.

  \subsection drwnProjMatlabExampleKMeans k-Means

  The \p mexKMeans function provides and interface to \b Darwin's fast
  k-means code. An example usage is given below.

\code
% get the data (rowwise features)
x = generateFeatureVectors();

% run k-means
options = struct('verbose', 1, 'maxiters', 100);
centroids = mexKMeans(5, x, [], options);

% plot results (first two dimensions)
figure;
plot(x(:, 1), x(:, 2), 'b.');
hold on;
plot(centroids(:, 1), centroids(:, 2), 'rx', 'MarkerSize', 5, 'LineWidth', 2);
hold off;
title('Darwin k-Means Example');
\endcode

*/

/*@}*/

}
